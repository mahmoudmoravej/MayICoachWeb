import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601DateTime: { input: any; output: any; }
};

export type Activity = {
  __typename?: 'Activity';
  aiEngineId: Scalars['Int']['output'];
  channelActivityId: Scalars['String']['output'];
  channelActivityUrl?: Maybe<Scalars['String']['output']>;
  channelId: Scalars['Int']['output'];
  date: Scalars['ISO8601DateTime']['output'];
  id: Scalars['Int']['output'];
  individualId: Scalars['Int']['output'];
  isAnalyzed: Scalars['Boolean']['output'];
  prompt?: Maybe<Scalars['String']['output']>;
  result?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

/** The connection type for Activity. */
export type ActivityConnection = {
  __typename?: 'ActivityConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ActivityEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Activity>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ActivityEdge = {
  __typename?: 'ActivityEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Activity>;
};

export type ActivityUpdate = {
  prompt?: InputMaybe<Scalars['String']['input']>;
  result?: InputMaybe<Scalars['String']['input']>;
};

/** Autogenerated input type of ActivityUpdate */
export type ActivityUpdateInput = {
  activityInput: ActivityUpdate;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of ActivityUpdate. */
export type ActivityUpdatePayload = {
  __typename?: 'ActivityUpdatePayload';
  activity: Activity;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of AnalyzeActivity */
export type AnalyzeActivityInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of AnalyzeActivity. */
export type AnalyzeActivityPayload = {
  __typename?: 'AnalyzeActivityPayload';
  activity: Activity;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
};

/** Autogenerated input type of ImportActivities */
export type ImportActivitiesInput = {
  channelId: Scalars['Int']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  individualId: Scalars['Int']['input'];
};

/** Autogenerated return type of ImportActivities. */
export type ImportActivitiesPayload = {
  __typename?: 'ImportActivitiesPayload';
  activities: Array<Activity>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  totalCount: Scalars['Int']['output'];
};

export type Individual = {
  __typename?: 'Individual';
  activities: ActivityConnection;
  fullname?: Maybe<Scalars['String']['output']>;
  handleGithub?: Maybe<Scalars['String']['output']>;
  handleGoogle?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isActive: Scalars['Boolean']['output'];
  isManager: Scalars['Boolean']['output'];
  jobLevelId?: Maybe<Scalars['String']['output']>;
  jobTitle?: Maybe<Scalars['String']['output']>;
  manager?: Maybe<Individual>;
  managerId?: Maybe<Scalars['Int']['output']>;
  organizationId: Scalars['Int']['output'];
  reports: IndividualConnection;
  userId?: Maybe<Scalars['Int']['output']>;
};


export type IndividualActivitiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};


export type IndividualReportsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Individual. */
export type IndividualConnection = {
  __typename?: 'IndividualConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<IndividualEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Individual>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type IndividualCreate = {
  fullname?: InputMaybe<Scalars['String']['input']>;
  handleGithub?: InputMaybe<Scalars['String']['input']>;
  handleGoogle?: InputMaybe<Scalars['String']['input']>;
  isActive: Scalars['Boolean']['input'];
  isManager: Scalars['Boolean']['input'];
  jobLevelId?: InputMaybe<Scalars['String']['input']>;
  jobTitle?: InputMaybe<Scalars['String']['input']>;
  managerId?: InputMaybe<Scalars['Int']['input']>;
  organizationId?: InputMaybe<Scalars['Int']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of IndividualCreate */
export type IndividualCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  individualInput: IndividualCreate;
};

/** Autogenerated return type of IndividualCreate. */
export type IndividualCreatePayload = {
  __typename?: 'IndividualCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  individual: Individual;
};

/** Autogenerated input type of IndividualDestroy */
export type IndividualDestroyInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
};

/** Autogenerated return type of IndividualDestroy. */
export type IndividualDestroyPayload = {
  __typename?: 'IndividualDestroyPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  individual: Individual;
};

/** An edge in a connection. */
export type IndividualEdge = {
  __typename?: 'IndividualEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Individual>;
};

export type IndividualUpdate = {
  fullname?: InputMaybe<Scalars['String']['input']>;
  handleGithub?: InputMaybe<Scalars['String']['input']>;
  handleGoogle?: InputMaybe<Scalars['String']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isManager?: InputMaybe<Scalars['Boolean']['input']>;
  jobLevelId?: InputMaybe<Scalars['String']['input']>;
  jobTitle?: InputMaybe<Scalars['String']['input']>;
  managerId?: InputMaybe<Scalars['Int']['input']>;
  organizationId?: InputMaybe<Scalars['Int']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Autogenerated input type of IndividualUpdate */
export type IndividualUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  individualInput: IndividualUpdate;
};

/** Autogenerated return type of IndividualUpdate. */
export type IndividualUpdatePayload = {
  __typename?: 'IndividualUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  individual: Individual;
};

export type Manager = {
  __typename?: 'Manager';
  Id: Scalars['Int']['output'];
  Name: Scalars['String']['output'];
  Reports: ReportConnection;
};


export type ManagerReportsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

/** The connection type for Manager. */
export type ManagerConnection = {
  __typename?: 'ManagerConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ManagerEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Manager>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** Autogenerated input type of ManagerCreate */
export type ManagerCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  managerInput: ManagerInput;
};

/** Autogenerated return type of ManagerCreate. */
export type ManagerCreatePayload = {
  __typename?: 'ManagerCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  manager: Manager;
};

/** An edge in a connection. */
export type ManagerEdge = {
  __typename?: 'ManagerEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Manager>;
};

export type ManagerInput = {
  Id: Scalars['Int']['input'];
  Name: Scalars['String']['input'];
};

/** Autogenerated input type of ManagerUpdate */
export type ManagerUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  managerInput: ManagerInput;
};

/** Autogenerated return type of ManagerUpdate. */
export type ManagerUpdatePayload = {
  __typename?: 'ManagerUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  manager: Manager;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Update an existing activity by id */
  activityUpdate?: Maybe<ActivityUpdatePayload>;
  /** Analyze an existing activity by id using AI engine */
  analyzeActivity?: Maybe<AnalyzeActivityPayload>;
  /** Import activities from external channel */
  importActivities?: Maybe<ImportActivitiesPayload>;
  /** Creates a new individual */
  individualCreate?: Maybe<IndividualCreatePayload>;
  /** remove an existing individual by id */
  individualDestroy?: Maybe<IndividualDestroyPayload>;
  /** Update an existing individual by id */
  individualUpdate?: Maybe<IndividualUpdatePayload>;
  /** Creates a new manager */
  managerCreate?: Maybe<ManagerCreatePayload>;
  /** Updates a manager by id */
  managerUpdate?: Maybe<ManagerUpdatePayload>;
  /** Creates a new report */
  reportCreate?: Maybe<ReportCreatePayload>;
  /** Updates a report by id */
  reportUpdate?: Maybe<ReportUpdatePayload>;
};


export type MutationActivityUpdateArgs = {
  input: ActivityUpdateInput;
};


export type MutationAnalyzeActivityArgs = {
  input: AnalyzeActivityInput;
};


export type MutationImportActivitiesArgs = {
  input: ImportActivitiesInput;
};


export type MutationIndividualCreateArgs = {
  input: IndividualCreateInput;
};


export type MutationIndividualDestroyArgs = {
  input: IndividualDestroyInput;
};


export type MutationIndividualUpdateArgs = {
  input: IndividualUpdateInput;
};


export type MutationManagerCreateArgs = {
  input: ManagerCreateInput;
};


export type MutationManagerUpdateArgs = {
  input: ManagerUpdateInput;
};


export type MutationReportCreateArgs = {
  input: ReportCreateInput;
};


export type MutationReportUpdateArgs = {
  input: ReportUpdateInput;
};

/** Fields to order by and the sort direction */
export type Order = {
  direction: Scalars['String']['input'];
  field: Scalars['String']['input'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export enum PerformanceCategory {
  HighPositive = 'HIGH_POSITIVE',
  New = 'NEW',
  OffTrack = 'OFF_TRACK',
  Positive = 'POSITIVE',
  UsuallyMeets = 'USUALLY_MEETS'
}

export type Query = {
  __typename?: 'Query';
  /** Returns a list of activities */
  activities: ActivityConnection;
  /** Returns an activity */
  activity: Activity;
  /** Returns an individual */
  individual: Individual;
  /** Returns a list of individuals */
  individuals: IndividualConnection;
  /** Returns a manager */
  manager: Manager;
  /** Returns a list of managers */
  managers: ManagerConnection;
  /** Returns logged in user details */
  myInfo: UserInfo;
  /** Returns a report */
  report: Report;
  /** Returns a list of reports */
  reports: ReportConnection;
};


export type QueryActivitiesArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  individualId?: InputMaybe<Scalars['ID']['input']>;
  isAnalyzed?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<Order>>;
};


export type QueryActivityArgs = {
  id: Scalars['ID']['input'];
};


export type QueryIndividualArgs = {
  id: Scalars['ID']['input'];
};


export type QueryIndividualsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isManager?: InputMaybe<Scalars['Boolean']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  managerId?: InputMaybe<Scalars['ID']['input']>;
  orderBy?: InputMaybe<Array<Order>>;
};


export type QueryManagerArgs = {
  id: Scalars['ID']['input'];
};


export type QueryManagersArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<Order>>;
};


export type QueryReportArgs = {
  id: Scalars['ID']['input'];
};


export type QueryReportsArgs = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type Report = {
  __typename?: 'Report';
  Id: Scalars['Int']['output'];
  Manager: Manager;
  ManagerId: Scalars['Int']['output'];
  Name: Scalars['String']['output'];
  Performance: PerformanceCategory;
};

/** The connection type for Report. */
export type ReportConnection = {
  __typename?: 'ReportConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReportEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Report>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** Autogenerated input type of ReportCreate */
export type ReportCreateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  reportInput: ReportInput;
};

/** Autogenerated return type of ReportCreate. */
export type ReportCreatePayload = {
  __typename?: 'ReportCreatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  report: Report;
};

/** An edge in a connection. */
export type ReportEdge = {
  __typename?: 'ReportEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String']['output'];
  /** The item at the end of the edge. */
  node?: Maybe<Report>;
};

export type ReportInput = {
  Id: Scalars['Int']['input'];
  ManagerId: Scalars['Int']['input'];
  Name: Scalars['String']['input'];
  Performance: PerformanceCategory;
};

/** Autogenerated input type of ReportUpdate */
export type ReportUpdateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  reportInput: ReportInput;
};

/** Autogenerated return type of ReportUpdate. */
export type ReportUpdatePayload = {
  __typename?: 'ReportUpdatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  report: Report;
};

export type UserInfo = {
  __typename?: 'UserInfo';
  Individual?: Maybe<Individual>;
  UserId: Scalars['Int']['output'];
};

export type ActivityFragmentFragment = { __typename?: 'Activity', id: number, title?: string | null, prompt?: string | null, result?: string | null, isAnalyzed: boolean };

export type FindActivityQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type FindActivityQuery = { __typename?: 'Query', activity: { __typename?: 'Activity', id: number, title?: string | null, prompt?: string | null, result?: string | null, isAnalyzed: boolean } };

export type UpdateActivityMutationVariables = Exact<{
  input: ActivityUpdateInput;
}>;


export type UpdateActivityMutation = { __typename?: 'Mutation', activityUpdate?: { __typename?: 'ActivityUpdatePayload', activity: { __typename?: 'Activity', id: number, title?: string | null, prompt?: string | null, result?: string | null, isAnalyzed: boolean } } | null };

export type FindIndividualQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type FindIndividualQuery = { __typename?: 'Query', individual: { __typename?: 'Individual', id: number, fullname?: string | null, handleGithub?: string | null, handleGoogle?: string | null, jobTitle?: string | null, jobLevelId?: string | null, userId?: number | null, managerId?: number | null, isManager: boolean }, managers: { __typename?: 'IndividualConnection', nodes?: Array<{ __typename?: 'Individual', id: number, fullname?: string | null } | null> | null } };

export type IndividualFragmentFragment = { __typename?: 'Individual', id: number, fullname?: string | null, handleGithub?: string | null, handleGoogle?: string | null, jobTitle?: string | null, jobLevelId?: string | null, userId?: number | null, managerId?: number | null, isManager: boolean };

export type UpdateIndividualMutationVariables = Exact<{
  input: IndividualUpdateInput;
}>;


export type UpdateIndividualMutation = { __typename?: 'Mutation', individualUpdate?: { __typename?: 'IndividualUpdatePayload', individual: { __typename?: 'Individual', id: number, fullname?: string | null, handleGithub?: string | null, handleGoogle?: string | null, jobTitle?: string | null, jobLevelId?: string | null, userId?: number | null, managerId?: number | null, isManager: boolean } } | null };

export type IndividualActivitiesQueryVariables = Exact<{
  individualId: Scalars['ID']['input'];
  isAnalyzed?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type IndividualActivitiesQuery = { __typename?: 'Query', activities: { __typename?: 'ActivityConnection', nodes?: Array<{ __typename?: 'Activity', id: number, title?: string | null, isAnalyzed: boolean, date: any, channelId: number, channelActivityUrl?: string | null } | null> | null } };

export type CreateIndividualMutationVariables = Exact<{
  input: IndividualCreateInput;
}>;


export type CreateIndividualMutation = { __typename?: 'Mutation', individualCreate?: { __typename?: 'IndividualCreatePayload', individual: { __typename?: 'Individual', id: number, fullname?: string | null, handleGithub?: string | null, handleGoogle?: string | null, jobTitle?: string | null, jobLevelId?: string | null, userId?: number | null, managerId?: number | null, isManager: boolean } } | null };

export type GetManagersQueryVariables = Exact<{ [key: string]: never; }>;


export type GetManagersQuery = { __typename?: 'Query', managers: { __typename?: 'IndividualConnection', nodes?: Array<{ __typename?: 'Individual', id: number, fullname?: string | null } | null> | null } };

export type IndividualsQueryVariables = Exact<{
  managerId?: InputMaybe<Scalars['ID']['input']>;
  fetchManagerId: Scalars['ID']['input'];
  fetchManagerDetails?: InputMaybe<Scalars['Boolean']['input']>;
  isManager?: InputMaybe<Scalars['Boolean']['input']>;
}>;


export type IndividualsQuery = { __typename?: 'Query', individuals: { __typename?: 'IndividualConnection', nodes?: Array<{ __typename?: 'Individual', id: number, fullname?: string | null, jobTitle?: string | null, jobLevelId?: string | null, isManager: boolean } | null> | null }, managerInfo: { __typename?: 'Individual', id: number, fullname?: string | null, jobTitle?: string | null } };

export type GetLoggedInUserInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type GetLoggedInUserInfoQuery = { __typename?: 'Query', myInfo: { __typename?: 'UserInfo', UserId: number, Individual?: { __typename?: 'Individual', id: number, isManager: boolean } | null } };

export const ActivityFragmentFragmentDoc = gql`
    fragment ActivityFragment on Activity {
  id
  title
  prompt
  result
  isAnalyzed
}
    `;
export const IndividualFragmentFragmentDoc = gql`
    fragment IndividualFragment on Individual {
  id
  fullname
  handleGithub
  handleGoogle
  jobTitle
  jobLevelId
  userId
  managerId
  isManager
}
    `;
export const FindActivityDocument = gql`
    query findActivity($id: ID!) {
  activity(id: $id) {
    ...ActivityFragment
  }
}
    ${ActivityFragmentFragmentDoc}`;

/**
 * __useFindActivityQuery__
 *
 * To run a query within a React component, call `useFindActivityQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindActivityQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFindActivityQuery(baseOptions: Apollo.QueryHookOptions<FindActivityQuery, FindActivityQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FindActivityQuery, FindActivityQueryVariables>(FindActivityDocument, options);
      }
export function useFindActivityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindActivityQuery, FindActivityQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FindActivityQuery, FindActivityQueryVariables>(FindActivityDocument, options);
        }
export type FindActivityQueryHookResult = ReturnType<typeof useFindActivityQuery>;
export type FindActivityLazyQueryHookResult = ReturnType<typeof useFindActivityLazyQuery>;
export type FindActivityQueryResult = Apollo.QueryResult<FindActivityQuery, FindActivityQueryVariables>;
export const UpdateActivityDocument = gql`
    mutation UpdateActivity($input: ActivityUpdateInput!) {
  activityUpdate(input: $input) {
    activity {
      ...ActivityFragment
    }
  }
}
    ${ActivityFragmentFragmentDoc}`;
export type UpdateActivityMutationFn = Apollo.MutationFunction<UpdateActivityMutation, UpdateActivityMutationVariables>;

/**
 * __useUpdateActivityMutation__
 *
 * To run a mutation, you first call `useUpdateActivityMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateActivityMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateActivityMutation, { data, loading, error }] = useUpdateActivityMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateActivityMutation(baseOptions?: Apollo.MutationHookOptions<UpdateActivityMutation, UpdateActivityMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateActivityMutation, UpdateActivityMutationVariables>(UpdateActivityDocument, options);
      }
export type UpdateActivityMutationHookResult = ReturnType<typeof useUpdateActivityMutation>;
export type UpdateActivityMutationResult = Apollo.MutationResult<UpdateActivityMutation>;
export type UpdateActivityMutationOptions = Apollo.BaseMutationOptions<UpdateActivityMutation, UpdateActivityMutationVariables>;
export const FindIndividualDocument = gql`
    query findIndividual($id: ID!) {
  individual(id: $id) {
    ...IndividualFragment
  }
  managers: individuals(isManager: true) {
    nodes {
      id
      fullname
    }
  }
}
    ${IndividualFragmentFragmentDoc}`;

/**
 * __useFindIndividualQuery__
 *
 * To run a query within a React component, call `useFindIndividualQuery` and pass it any options that fit your needs.
 * When your component renders, `useFindIndividualQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFindIndividualQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFindIndividualQuery(baseOptions: Apollo.QueryHookOptions<FindIndividualQuery, FindIndividualQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<FindIndividualQuery, FindIndividualQueryVariables>(FindIndividualDocument, options);
      }
export function useFindIndividualLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<FindIndividualQuery, FindIndividualQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<FindIndividualQuery, FindIndividualQueryVariables>(FindIndividualDocument, options);
        }
export type FindIndividualQueryHookResult = ReturnType<typeof useFindIndividualQuery>;
export type FindIndividualLazyQueryHookResult = ReturnType<typeof useFindIndividualLazyQuery>;
export type FindIndividualQueryResult = Apollo.QueryResult<FindIndividualQuery, FindIndividualQueryVariables>;
export const UpdateIndividualDocument = gql`
    mutation UpdateIndividual($input: IndividualUpdateInput!) {
  individualUpdate(input: $input) {
    individual {
      ...IndividualFragment
    }
  }
}
    ${IndividualFragmentFragmentDoc}`;
export type UpdateIndividualMutationFn = Apollo.MutationFunction<UpdateIndividualMutation, UpdateIndividualMutationVariables>;

/**
 * __useUpdateIndividualMutation__
 *
 * To run a mutation, you first call `useUpdateIndividualMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateIndividualMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateIndividualMutation, { data, loading, error }] = useUpdateIndividualMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateIndividualMutation(baseOptions?: Apollo.MutationHookOptions<UpdateIndividualMutation, UpdateIndividualMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<UpdateIndividualMutation, UpdateIndividualMutationVariables>(UpdateIndividualDocument, options);
      }
export type UpdateIndividualMutationHookResult = ReturnType<typeof useUpdateIndividualMutation>;
export type UpdateIndividualMutationResult = Apollo.MutationResult<UpdateIndividualMutation>;
export type UpdateIndividualMutationOptions = Apollo.BaseMutationOptions<UpdateIndividualMutation, UpdateIndividualMutationVariables>;
export const IndividualActivitiesDocument = gql`
    query individualActivities($individualId: ID!, $isAnalyzed: Boolean) {
  activities(
    individualId: $individualId
    isAnalyzed: $isAnalyzed
    orderBy: [{field: "date", direction: "desc"}]
  ) {
    nodes {
      id
      title
      isAnalyzed
      date
      channelId
      channelActivityUrl
    }
  }
}
    `;

/**
 * __useIndividualActivitiesQuery__
 *
 * To run a query within a React component, call `useIndividualActivitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualActivitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualActivitiesQuery({
 *   variables: {
 *      individualId: // value for 'individualId'
 *      isAnalyzed: // value for 'isAnalyzed'
 *   },
 * });
 */
export function useIndividualActivitiesQuery(baseOptions: Apollo.QueryHookOptions<IndividualActivitiesQuery, IndividualActivitiesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IndividualActivitiesQuery, IndividualActivitiesQueryVariables>(IndividualActivitiesDocument, options);
      }
export function useIndividualActivitiesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IndividualActivitiesQuery, IndividualActivitiesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IndividualActivitiesQuery, IndividualActivitiesQueryVariables>(IndividualActivitiesDocument, options);
        }
export type IndividualActivitiesQueryHookResult = ReturnType<typeof useIndividualActivitiesQuery>;
export type IndividualActivitiesLazyQueryHookResult = ReturnType<typeof useIndividualActivitiesLazyQuery>;
export type IndividualActivitiesQueryResult = Apollo.QueryResult<IndividualActivitiesQuery, IndividualActivitiesQueryVariables>;
export const CreateIndividualDocument = gql`
    mutation createIndividual($input: IndividualCreateInput!) {
  individualCreate(input: $input) {
    individual {
      ...IndividualFragment
    }
  }
}
    ${IndividualFragmentFragmentDoc}`;
export type CreateIndividualMutationFn = Apollo.MutationFunction<CreateIndividualMutation, CreateIndividualMutationVariables>;

/**
 * __useCreateIndividualMutation__
 *
 * To run a mutation, you first call `useCreateIndividualMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateIndividualMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createIndividualMutation, { data, loading, error }] = useCreateIndividualMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateIndividualMutation(baseOptions?: Apollo.MutationHookOptions<CreateIndividualMutation, CreateIndividualMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateIndividualMutation, CreateIndividualMutationVariables>(CreateIndividualDocument, options);
      }
export type CreateIndividualMutationHookResult = ReturnType<typeof useCreateIndividualMutation>;
export type CreateIndividualMutationResult = Apollo.MutationResult<CreateIndividualMutation>;
export type CreateIndividualMutationOptions = Apollo.BaseMutationOptions<CreateIndividualMutation, CreateIndividualMutationVariables>;
export const GetManagersDocument = gql`
    query getManagers {
  managers: individuals(isManager: true) {
    nodes {
      id
      fullname
    }
  }
}
    `;

/**
 * __useGetManagersQuery__
 *
 * To run a query within a React component, call `useGetManagersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetManagersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetManagersQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetManagersQuery(baseOptions?: Apollo.QueryHookOptions<GetManagersQuery, GetManagersQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetManagersQuery, GetManagersQueryVariables>(GetManagersDocument, options);
      }
export function useGetManagersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetManagersQuery, GetManagersQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetManagersQuery, GetManagersQueryVariables>(GetManagersDocument, options);
        }
export type GetManagersQueryHookResult = ReturnType<typeof useGetManagersQuery>;
export type GetManagersLazyQueryHookResult = ReturnType<typeof useGetManagersLazyQuery>;
export type GetManagersQueryResult = Apollo.QueryResult<GetManagersQuery, GetManagersQueryVariables>;
export const IndividualsDocument = gql`
    query individuals($managerId: ID, $fetchManagerId: ID!, $fetchManagerDetails: Boolean = false, $isManager: Boolean) {
  individuals(managerId: $managerId, isManager: $isManager, isActive: true) {
    nodes {
      id
      fullname
      jobTitle
      jobLevelId
      isManager
    }
  }
  managerInfo: individual(id: $fetchManagerId) @include(if: $fetchManagerDetails) {
    id
    fullname
    jobTitle
  }
}
    `;

/**
 * __useIndividualsQuery__
 *
 * To run a query within a React component, call `useIndividualsQuery` and pass it any options that fit your needs.
 * When your component renders, `useIndividualsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useIndividualsQuery({
 *   variables: {
 *      managerId: // value for 'managerId'
 *      fetchManagerId: // value for 'fetchManagerId'
 *      fetchManagerDetails: // value for 'fetchManagerDetails'
 *      isManager: // value for 'isManager'
 *   },
 * });
 */
export function useIndividualsQuery(baseOptions: Apollo.QueryHookOptions<IndividualsQuery, IndividualsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<IndividualsQuery, IndividualsQueryVariables>(IndividualsDocument, options);
      }
export function useIndividualsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<IndividualsQuery, IndividualsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<IndividualsQuery, IndividualsQueryVariables>(IndividualsDocument, options);
        }
export type IndividualsQueryHookResult = ReturnType<typeof useIndividualsQuery>;
export type IndividualsLazyQueryHookResult = ReturnType<typeof useIndividualsLazyQuery>;
export type IndividualsQueryResult = Apollo.QueryResult<IndividualsQuery, IndividualsQueryVariables>;
export const GetLoggedInUserInfoDocument = gql`
    query getLoggedInUserInfo {
  myInfo {
    UserId
    Individual {
      id
      isManager
    }
  }
}
    `;

/**
 * __useGetLoggedInUserInfoQuery__
 *
 * To run a query within a React component, call `useGetLoggedInUserInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLoggedInUserInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLoggedInUserInfoQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetLoggedInUserInfoQuery(baseOptions?: Apollo.QueryHookOptions<GetLoggedInUserInfoQuery, GetLoggedInUserInfoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetLoggedInUserInfoQuery, GetLoggedInUserInfoQueryVariables>(GetLoggedInUserInfoDocument, options);
      }
export function useGetLoggedInUserInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetLoggedInUserInfoQuery, GetLoggedInUserInfoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetLoggedInUserInfoQuery, GetLoggedInUserInfoQueryVariables>(GetLoggedInUserInfoDocument, options);
        }
export type GetLoggedInUserInfoQueryHookResult = ReturnType<typeof useGetLoggedInUserInfoQuery>;
export type GetLoggedInUserInfoLazyQueryHookResult = ReturnType<typeof useGetLoggedInUserInfoLazyQuery>;
export type GetLoggedInUserInfoQueryResult = Apollo.QueryResult<GetLoggedInUserInfoQuery, GetLoggedInUserInfoQueryVariables>;